################################################################################
#ABOUT:                                                                        #
# This is a Makefile for medium sized C projects. It supports auxillary files  #
# in C++, but not main.c or test.c (yet).                                      #
################################################################################
#USAGE:                                                                        #
# $ make build (default)                                                       #
# > Builds the $(LIBRARY) if defined; Builds the $(BUILD_PROG) if defined.     #
# $ make test                                                                  #
# > Builds the $(TEST_PROG) ie the test suite.                                 #
# $ make clean                                                                 #
# > Removes all files generated in the build process                           #
######################################################################Colin 2024
#Config

#Directories
INC_DIR   := include/
SRC_DIR   := src/
OBJ_DIR   := obj/
BIN_DIR   := bin/

#Dependencies in $(INC_DIR):
HEADERS    = board.h board_types.h debug.h getline_noblock.h test.h tokenize.h uci.h
#Targets in $(OBJ_DIR):
OBJECTS    = board.o getline_noblock.o tokenize.o uci.o
#Files generated by $(SCRIPTS)
GENERATE   = include/commands.h include/responses.h src/commands.c src/responses.c
#Scripts to run before building; Found in $(BIN_DIR)
SCRIPTS    = generate_locale.py

#Outputs
LIBRARY    = #libengine.a
TEST_MAIN  = src/test.c
TEST_PROG  = test_suite
BUILD_MAIN = src/main.c
BUILD_PROG = flipflop

#Compiling flags
CFLAGS    := $(CFLAGS) -I$(INC_DIR) -lstdc++
CXXFLAGS  := $(CXXFLAGS) -I$(INC_DIR)

################################################################################
#Magic
headers    = $(addprefix $(INC_DIR), $(HEADERS))
objects    = $(addprefix $(OBJ_DIR), $(OBJECTS))
scripts    = $(addprefix $(BIN_DIR), $(SCRIPTS))

build: generate $(LIBRARY) $(BUILD_PROG)

test: generate $(TEST_PROG)

generate:
	$(foreach script, $(scripts), $(script))

$(LIBRARY): $(objects)
	$(AR) $(ARFLAGS) $@ $^

$(BUILD_PROG): $(objects)
	$(CC) $(CFLAGS) $(BUILD_MAIN) $< -o $@

$(TEST_PROG): $(objects)
	$(CC) $(CFLAGS) $(TEST_MAIN) $< -o $@

#c code
$(OBJ_DIR)%.o: $(SRC_DIR)%.c $(headers)
	@mkdir -p $(OBJ_DIR)
	$(CC) -c $(CFLAGS) $< -o $@

#c++ code
$(OBJ_DIR)%.o: $(SRC_DIR)%.cpp $(headers)
	@mkdir -p $(OBJ_DIR)
	$(CXX) -c $(CXXFLAGS) $< -o $@

clean:
	$(RM) $(LIBRARY) $(TEST_PROG) $(BUILD_PROG)
	$(RM) $(GENERATE)
	$(RM) $(OBJECTS)
	$(RM) -R $(OBJ_DIR)
	
